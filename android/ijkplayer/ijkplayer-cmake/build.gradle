apply plugin: 'com.android.library'

task cleanTempFiles(type: Delete) {
    delete fileTree("src/main/jniLibs").matching {
        include "**/*ijkplayer.so"
        include "**/*ijksdl.so"
    }
}

task copyFFmpegFiles() {
    def files = fileTree("${rootDir.absoluteFile.parent}/out/libs").matching {
        include "**/*ffmpeg.so"
    }.getFiles()
    def target = "${rootDir.absoluteFile}/so"
    for (file in files) {
        def targetPath = "$target/${file.parentFile.name}/${file.name}"
        println("copy from ${file.path} to ${targetPath}")
        new File(targetPath).parentFile.mkdirs()
        new FileOutputStream(targetPath).with {
            it.write(file.readBytes())
            it.flush()
        }
    }
}

android {
    afterEvaluate {
        tasks.matching {
            it.name.startsWith('ass')
        }.each { task ->
            task.dependsOn(cleanTempFiles, copyFFmpegFiles)
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.targetSdkVersion

        externalNativeBuild {
            cmake {
                def useShell = 0 // use source
//                def useShell = 1 // use shell

                def projectPath = "${rootDir.absolutePath}"
                def ijkPath = rootDir.absoluteFile.parentFile.parent
                def ffmpegOutPath = "${new File("${projectPath}").parent}/out/libs"
                arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang",
                        "-DFFMPEG_OUT=$ffmpegOutPath", "-DANROID_PROJECT_PATH=$projectPath",
                        "-DUSE_SHELL=$useShell", "-DIJK_PATH=$ijkPath",
                        "-DAndroid=1", "-DANDROID=1"
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        java.srcDirs = ["$rootProject.rootDir/ijkplayer-java/src/main/java/"]
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
    }
    externalNativeBuild {
        cmake {
            path 'src/main/CMakeLists.txt'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains:annotations:13.0"
    api 'com.android.support:support-annotations:28.0.0'
}
